{"version":3,"file":"OpenRouterTextgenRequest.js","sourceRoot":"","sources":["../../../src/3rd-party/open-router/OpenRouterTextgenRequest.ts"],"names":[],"mappings":"AAAA,sFAAsF;AAkDtF,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,QAAQ;IACR,WAAW;IACX,aAAa;IACb,QAAQ;IACR,QAAQ;IACR,UAAU;IACV,UAAU;IACV,WAAW;IACX,OAAO;IACP,OAAO;IACP,UAAU;IACV,WAAW;IACX,YAAY;IACZ,UAAU;IACV,WAAW;IACX,SAAS;IACT,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,QAAQ;CACA,CAAC","sourcesContent":["// modified for completion and better naming, see  https://openrouter.ai/docs#requests\n\n// Definitions of subtypes are below\nexport type OpenRouterTextgenRequest = {\n  // Either \"messages\" or \"prompt\" is required\n  messages?: Readonly<OpenRouterMessage[]>;\n  prompt?: string;\n\n  // If \"model\" is unspecified, uses the user's default\n  model?: string; // See \"Supported Models\" section\n\n  // Allows to force the model to produce specific output format.\n  // Only supported by OpenAI models, Nitro models, and some others - check the\n  // providers on the model page on openrouter.ai/models to see if it's supported,\n  // and set `require_parameters` to true in your Provider Preferences. See\n  // openrouter.ai/docs#provider-routing\n  response_format?: { type: \"json_object\" };\n\n  stop?: string | string[];\n  stream?: boolean; // Enable streaming\n\n  // See LLM Parameters (openrouter.ai/docs#parameters)\n  max_tokens?: number; // Range: [1, context_length)\n  temperature?: number; // Range: [0, 2]\n  top_p?: number; // Range: (0, 1]\n  top_k?: number; // Range: [1, Infinity) Not available for OpenAI models\n  frequency_penalty?: number; // Range: [-2, 2]\n  presence_penalty?: number; // Range: [-2, 2]\n  repetition_penalty?: number; // Range: (0, 2]\n  seed?: number; // OpenAI only\n\n  // Function-calling\n  // Only natively suported by OpenAI models. For others, we submit\n  // a YAML-formatted string with these tools at the end of the prompt.\n  tools?: Tool[];\n  tool_choice?: ToolChoice;\n\n  // Additional optional parameters\n  logit_bias?: { [key: number]: number };\n\n  // OpenRouter-only parameters\n  // See \"Prompt Transforms\" section: openrouter.ai/docs#transforms\n  transforms?: string[];\n  // See \"Model Routing\" section: openrouter.ai/docs#model-routing\n  models?: string[];\n  route?: \"fallback\";\n  // See \"Provider Routing\" section: openrouter.ai/docs#provider-routing\n  provider?: ProviderPreferences;\n};\n\nexport const PROVIDERS = [\n  \"OpenAI\",\n  \"Anthropic\",\n  \"HuggingFace\",\n  \"Google\",\n  \"Mancer\",\n  \"Mancer 2\",\n  \"Together\",\n  \"DeepInfra\",\n  \"Azure\",\n  \"Modal\",\n  \"AnyScale\",\n  \"Replicate\",\n  \"Perplexity\",\n  \"Recursal\",\n  \"Fireworks\",\n  \"Mistral\",\n  \"Groq\",\n  \"Cohere\",\n  \"Lepton\",\n  \"OctoAI\",\n  \"Novita\",\n  \"Lynn\",\n  \"Lynn 2\",\n] as const;\n\nexport type ProviderPreferences = {\n  allow_fallbacks: boolean;\n  require_parameters: boolean;\n  data_collection: \"deny\" | \"allow\";\n  order: (typeof PROVIDERS)[number][];\n};\n\n// Subtypes:\n\ntype TextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ImageContentPart = {\n  type: \"image_url\";\n  image_url: {\n    url: string; // URL or base64 encoded image data\n    detail?: string; // Optional, defaults to 'auto'\n  };\n};\n\ntype ContentPart = TextContent | ImageContentPart;\n\nexport type OpenRouterMessage = {\n  // role: \"user\" | \"assistant\" | \"system\" | \"tool\" | string;\n  role: \"user\" | \"assistant\" | \"system\" | \"tool\";\n  // ContentParts are only for the 'user' role:\n  content: string | ContentPart[];\n  // If \"name\" is included, it will be prepended like this\n  // for non-OpenAI models: `{name}: {content}`\n  name?: string;\n};\n\ntype FunctionDescription = {\n  description?: string;\n  name: string;\n  parameters: object; // JSON Schema object\n};\n\ntype Tool = {\n  type: \"function\";\n  function: FunctionDescription;\n};\n\ntype ToolChoice =\n  | \"none\"\n  | \"auto\"\n  | {\n      type: \"function\";\n      function: {\n        name: string;\n      };\n    };\n"]}