{"version":3,"file":"OpenRouterTextgenResponse.js","sourceRoot":"","sources":["../../../src/3rd-party/open-router/OpenRouterTextgenResponse.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAmC5C,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAC5C,KAAc,EACyB,EAAE;IACzC,MAAM,KAAK,GAAG,KAAqC,CAAC;IACpD,OAAO,CACL,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,OAAO,EAAE,OAAO,KAAK,QAAQ,CACxE,CAAC;AACJ,CAAC,CAAC;AAaF,MAAM,CAAC,MAAM,2BAA2B,GAAG,CACzC,KAAc,EACsB,EAAE;IACtC,MAAM,KAAK,GAAG,KAAkC,CAAC;IACjD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,KAAK,EAAE,OAAO,KAAK,QAAQ,CAAC;AAC/E,CAAC,CAAC","sourcesContent":["// @see https://openrouter.ai/docs#responses\n\n// Definitions of subtypes are below\n\nexport type OpenRouterTextgenResponse = {\n  id: string;\n  // Depending on whether you set \"stream\" to \"true\" and\n  // whether you passed in \"messages\" or a \"prompt\", you\n  // will get a different output shape\n  choices: (\n    | OpenRouterNonStreamingChoice\n    | OpenRouterStreamingChoice\n    | OpenRouterNonChatChoice\n    | Error\n  )[];\n  created: number; // Unix timestamp\n  model: string;\n  object: \"chat.completion\" | \"chat.completion.chunk\";\n  // For non-streaming responses only. For streaming responses,\n  // see \"Querying Cost and Stats\" below.\n  usage?: {\n    completion_tokens: number; // Equivalent to \"native_tokens_completion\" in the /generation API\n    prompt_tokens: number; // Equivalent to \"native_tokens_prompt\"\n    total_tokens: number; // Sum of the above two fields\n    total_cost: number; // Number of credits used by this generation\n  };\n};\n\n// Subtypes:\n\nexport type OpenRouterNonChatChoice = {\n  finish_reason: string | null;\n  text: string;\n};\n\nexport const isOpenRouterNonStreamingChoice = (\n  maybe: unknown\n): maybe is OpenRouterNonStreamingChoice => {\n  const straw = maybe as OpenRouterNonStreamingChoice;\n  return (\n    typeof straw === \"object\" && typeof straw.message?.content === \"string\"\n  );\n};\n\nexport type OpenRouterNonStreamingChoice = {\n  finish_reason: string | null; // Depends on the model. Ex: 'stop' | 'length' | 'content_filter' | 'tool_calls' | 'function_call'\n  message: {\n    content: string | null;\n    role: string;\n    tool_calls?: ToolCall[];\n    // Deprecated, replaced by tool_calls\n    function_call?: FunctionCall;\n  };\n};\n\nexport const isOpenrouterStreamingChoice = (\n  maybe: unknown\n): maybe is OpenRouterStreamingChoice => {\n  const straw = maybe as OpenRouterStreamingChoice;\n  return typeof straw === \"object\" && typeof straw.delta?.content === \"string\";\n};\n\nexport type OpenRouterStreamingChoice = {\n  finish_reason: string | null;\n  delta: {\n    content: string | null;\n    role?: string;\n    tool_calls?: ToolCall[];\n    // Deprecated, replaced by tool_calls\n    function_call?: FunctionCall;\n  };\n};\n\ntype Error = {\n  code: number; // See \"Error Handling\" section\n  message: string;\n};\n\ntype FunctionCall = {\n  name: string;\n  arguments: string; // JSON format arguments\n};\n\ntype ToolCall = {\n  id: string;\n  type: \"function\";\n  function: FunctionCall;\n};\n"]}