{"version":3,"file":"chatMessagesToPromptText.js","sourceRoot":"","sources":["../../src/textgen/chatMessagesToPromptText.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAIrD,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,EACvC,QAAQ,EACR,eAAe,GAIhB,EAAU,EAAE;IACX,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,eAAe,CAAC;IAChE,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,EAAE,IAAI,CAAC;IACzE,MAAM,aAAa,GACjB,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,KAAK,WAAW;QAClC,CAAC,CAAC,SAAS;QACX,CAAC,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IAC9D,MAAM,eAAe,GAAG,CAAC,GAAG,QAAQ,EAAE,aAAa,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACvE,MAAM,WAAW,GAAG,eAAe;SAChC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;QAClB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;QAC5C,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,MAAM,YAAY,GAAG,OAAO,CAAC;QAE7B,IAAI,CAAC,KAAK,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrC,OAAO;gBACL,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,IAAI,EAAE,GAAG,YAAY,GAAG,MAAM,GAAG,SAAS,GAAG,YAAY,EAAE;aAC5D,CAAC;QACJ,CAAC;QACD,OAAO;YACL,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,GAAG,YAAY,GAAG,MAAM,GAAG,SAAS,GAAG,YAAY,GAAG,UAAU,EAAE;SACzE,CAAC;IACJ,CAAC,CAAC;SACD,MAAM,CAAC,SAAS,CAAC,CAAC;IACrB,OAAO,GAAG,eAAe,CAAC,GAAG,IAAI,EAAE,GAAG,WAAW;SAC9C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SAClB,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { isDefined, last } from \"@mjt-engine/object\";\nimport type { OpenRouterMessage } from \"../3rd-party/open-router/OpenRouterTextgenRequest\";\nimport type { ChatMessageTemplate } from \"./ChatMessageTemplate\";\n\nexport const chatMessagesToPromptText = ({\n  messages,\n  messageTemplate,\n}: {\n  messages: Readonly<OpenRouterMessage[]>;\n  messageTemplate: ChatMessageTemplate;\n}): string => {\n  const { messageStart, afterRole, messageEnd } = messageTemplate;\n  const assistantName = messages.find((m) => m.role === \"assistant\")?.name;\n  const ephemeralLast: OpenRouterMessage | undefined =\n    last(messages)?.role === \"assistant\"\n      ? undefined\n      : { role: \"assistant\", content: \"\", name: assistantName };\n  const updatedMessages = [...messages, ephemeralLast].filter(isDefined);\n  const promptTexts = updatedMessages\n    .map((message, i) => {\n      const author = message.name ?? message.role;\n      const rawText = message.content;\n      const renderedText = rawText;\n\n      if (i === updatedMessages.length - 1) {\n        return {\n          role: message.role,\n          text: `${messageStart}${author}${afterRole}${renderedText}`,\n        };\n      }\n      return {\n        role: message.role,\n        text: `${messageStart}${author}${afterRole}${renderedText}${messageEnd}`,\n      };\n    })\n    .filter(isDefined);\n  return `${messageTemplate.bos ?? \"\"}${promptTexts\n    .map((p) => p.text)\n    .join(\"\")}`;\n};\n"]}